/*
 * This file was generated by qdbusxml2cpp version 0.7
 * Command line was: qdbusxml2cpp notificationmanager.xml -a dbusinterfacenotificationsourceadaptor -c DBusInterfaceNotificationSourceAdaptor -l DBusInterfaceNotificationSource -i dbusinterfacenotificationsource.h -i metatypedeclarations.h
 *
 * qdbusxml2cpp is Copyright (C) 2009 Nokia Corporation and/or its subsidiary(-ies).
 *
 * This is an auto-generated file.
 * Do not edit! All changes made to it will be lost.
 */

#include "dbusinterfacenotificationsourceadaptor.h"
#include <QtCore/QMetaObject>
#include <QtCore/QByteArray>
#include <QtCore/QList>
#include <QtCore/QMap>
#include <QtCore/QString>
#include <QtCore/QStringList>
#include <QtCore/QVariant>

/*
 * Implementation of adaptor class DBusInterfaceNotificationSourceAdaptor
 */

DBusInterfaceNotificationSourceAdaptor::DBusInterfaceNotificationSourceAdaptor(DBusInterfaceNotificationSource *parent)
    : QDBusAbstractAdaptor(parent)
{
    // constructor
    setAutoRelaySignals(true);
}

DBusInterfaceNotificationSourceAdaptor::~DBusInterfaceNotificationSourceAdaptor()
{
    // destructor
}

uint DBusInterfaceNotificationSourceAdaptor::addGroup(uint notificationUserId, const QString &eventType, const QString &summary, const QString &body, const QString &action, const QString &imageURI, uint count, bool persistent)
{
    // handle method call org.maemo.dui.NotificationManager.addGroup
    return parent()->addGroup(notificationUserId, eventType, summary, body, action, imageURI, count, persistent);
}

uint DBusInterfaceNotificationSourceAdaptor::addGroup(uint notificationUserId, const QString &eventType, bool persistent)
{
    // handle method call org.maemo.dui.NotificationManager.addGroup
    return parent()->addGroup(notificationUserId, eventType, persistent);
}

uint DBusInterfaceNotificationSourceAdaptor::addGroup(const QString &eventType, const QString &summary, const QString &body, const QString &action, const QString &imageURI)
{
    // handle method call org.maemo.dui.NotificationManager.addGroup
    return parent()->addGroup(eventType, summary, body, action, imageURI);
}

uint DBusInterfaceNotificationSourceAdaptor::addGroup(const QString &eventType)
{
    // handle method call org.maemo.dui.NotificationManager.addGroup
    return parent()->addGroup(eventType);
}

uint DBusInterfaceNotificationSourceAdaptor::addNotification(uint notificationUserId, uint groupId, const QString &eventType, const QString &summary, const QString &body, const QString &action, const QString &imageURI, uint count, bool persistent)
{
    // handle method call org.maemo.dui.NotificationManager.addNotification
    return parent()->addNotification(notificationUserId, groupId, eventType, summary, body, action, imageURI, count, persistent);
}

uint DBusInterfaceNotificationSourceAdaptor::addNotification(uint notificationUserId, uint groupId, const QString &eventType, bool persistent)
{
    // handle method call org.maemo.dui.NotificationManager.addNotification
    return parent()->addNotification(notificationUserId, groupId, eventType, persistent);
}

uint DBusInterfaceNotificationSourceAdaptor::addNotification(uint groupId, const QString &eventType, const QString &summary, const QString &body, const QString &action, const QString &imageURI)
{
    // handle method call org.maemo.dui.NotificationManager.addNotification
    return parent()->addNotification(groupId, eventType, summary, body, action, imageURI);
}

uint DBusInterfaceNotificationSourceAdaptor::addNotification(uint groupId, const QString &eventType)
{
    // handle method call org.maemo.dui.NotificationManager.addNotification
    return parent()->addNotification(groupId, eventType);
}

QList < uint >  DBusInterfaceNotificationSourceAdaptor::notificationIdList(uint notificationUserId)
{
    // handle method call org.maemo.dui.NotificationManager.notificationIdList
    return parent()->notificationIdList(notificationUserId);
}

uint DBusInterfaceNotificationSourceAdaptor::notificationUserId()
{
    // handle method call org.maemo.dui.NotificationManager.notificationUserId
    return parent()->notificationUserId();
}

bool DBusInterfaceNotificationSourceAdaptor::removeGroup(uint notificationUserId, uint groupId)
{
    // handle method call org.maemo.dui.NotificationManager.removeGroup
    return parent()->removeGroup(notificationUserId, groupId);
}

bool DBusInterfaceNotificationSourceAdaptor::removeGroup(uint groupId)
{
    // handle method call org.maemo.dui.NotificationManager.removeGroup
    return parent()->removeGroup(groupId);
}

bool DBusInterfaceNotificationSourceAdaptor::removeNotification(uint notificationUserId, uint notificationId)
{
    // handle method call org.maemo.dui.NotificationManager.removeNotification
    return parent()->removeNotification(notificationUserId, notificationId);
}

bool DBusInterfaceNotificationSourceAdaptor::removeNotification(uint notificationId)
{
    // handle method call org.maemo.dui.NotificationManager.removeNotification
    return parent()->removeNotification(notificationId);
}

bool DBusInterfaceNotificationSourceAdaptor::updateGroup(uint notificationUserId, uint groupId, const QString &eventType, const QString &summary, const QString &body, const QString &action, const QString &imageURI, uint count)
{
    // handle method call org.maemo.dui.NotificationManager.updateGroup
    return parent()->updateGroup(notificationUserId, groupId, eventType, summary, body, action, imageURI, count);
}

bool DBusInterfaceNotificationSourceAdaptor::updateGroup(uint notificationUserId, uint groupId, const QString &eventType)
{
    // handle method call org.maemo.dui.NotificationManager.updateGroup
    return parent()->updateGroup(notificationUserId, groupId, eventType);
}

bool DBusInterfaceNotificationSourceAdaptor::updateGroup(uint groupId, const QString &eventType, const QString &summary, const QString &body, const QString &action, const QString &imageURI)
{
    // handle method call org.maemo.dui.NotificationManager.updateGroup
    return parent()->updateGroup(groupId, eventType, summary, body, action, imageURI);
}

bool DBusInterfaceNotificationSourceAdaptor::updateGroup(uint groupId, const QString &eventType)
{
    // handle method call org.maemo.dui.NotificationManager.updateGroup
    return parent()->updateGroup(groupId, eventType);
}

bool DBusInterfaceNotificationSourceAdaptor::updateNotification(uint notificationUserId, uint notificationId, const QString &eventType, const QString &summary, const QString &body, const QString &action, const QString &imageURI, uint count)
{
    // handle method call org.maemo.dui.NotificationManager.updateNotification
    return parent()->updateNotification(notificationUserId, notificationId, eventType, summary, body, action, imageURI, count);
}

bool DBusInterfaceNotificationSourceAdaptor::updateNotification(uint notificationUserId, uint notificationId, const QString &eventType)
{
    // handle method call org.maemo.dui.NotificationManager.updateNotification
    return parent()->updateNotification(notificationUserId, notificationId, eventType);
}

bool DBusInterfaceNotificationSourceAdaptor::updateNotification(uint notificationId, const QString &eventType, const QString &summary, const QString &body, const QString &action, const QString &imageURI)
{
    // handle method call org.maemo.dui.NotificationManager.updateNotification
    return parent()->updateNotification(notificationId, eventType, summary, body, action, imageURI);
}

bool DBusInterfaceNotificationSourceAdaptor::updateNotification(uint notificationId, const QString &eventType)
{
    // handle method call org.maemo.dui.NotificationManager.updateNotification
    return parent()->updateNotification(notificationId, eventType);
}

