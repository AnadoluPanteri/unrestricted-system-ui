/*! \page notifications Notifications System Implementation

The notifications system is implemented by the system UI daemon. This page describes the architecture and internals of the notification system itself and is meant for those developing the notification system. Convenience classes for application developers willing to use the notification system are provided in libdui. <strong>If you're an application developer willing to use notifications, refer to the libdui documentation for more information. There's a separate page for notifications that contains all the necessary information. However, if you want to define new notification event types for your application or you need to write system notification plugins, read on.</strong>

\section components Components

The notification system is divided into three entities:

- \b %Notification \b sources - %Notification sources observe events like signals in D-Bus system bus and changed values in context framework. System notifications are spawned by a special source which loads a fixed set of plugins.They can also expose APIs to allow other applications to trigger notifications.
- \b %Notification \b manager - Manages the triggered notifications.
- \b %Notification \b sinks - Sinks act based on a notification. Sinks can for instance display a notification widget, play a sound or trigger tactile feedback.

\image html notificationmanager.png "Notification system structure"

\section sources Notification sources

%Notification sources are responsible for triggering notifications based on events and their internal logic. %Notification sources are given a notification manager interface instance that they should use to trigger notifications. %Notification sources inherit the \c NotificationSource interface.

%Notification sources can use various means to decide whether notifications should be triggered. %Notification sources can connect to backends like context framework or D-Bus. System notifications have a special notification source which loads trusted plugins as system notifications cannot be sent over the DBus.A plugin just needs to call addNotification method of the notification manager interface when it is ready to send a notification. How a plugin interacts with the application originating a notification is left to a plugin.%Notification sources can also publish D-Bus interfaces to allow external parties to launch notifications. The <a href="http://www.galago-project.org/specs/notification/">Galago Desktop Notification Specification</a> can for instance be supported by a separate notification source in the system.

\section manager Notification manager

%Notification manager (\c NotificationManagerInterface) defines an interface to create notifications. %Notification manager interface object is passed to every \c NotificationSource for them to trigger notifications. %Notification manager will create unique IDs for notifications and trigger notification sinks (\c NotificationSink) depending on the notification.

%Notification manager queues notifications so that only one notification is triggered at a time. Notifications that are submitted when a notification is in process are appended to a queue which is then processed in first-in-first-out manner. %Notification manager defines maximum size for the queue. If queue size is exceeded all incoming notifications are silently dropped. This is to avoid malicious software from flooding the notifications system and creating a denial-of-service scenario.

The \c NotificationManagerInterface also supports a concept of notification groups. A notification sender can create notification groups and subsequentially add notifications to the groups it has created. Notifications belonging to a group can be handled differently by some notification sinks. For example the \c NotificationAreaSink visualizes groupped notifications as a single element. The notification groups have group specific data which can be updated using the \c NotificationManagerInterface::updateGroup() method.

\section sinks Notification sinks

%Notification sinks (\c NotificationSink) get notified by notification manager when a notification they should act upon is triggered. %Notification sinks can create various feedback when a notification is triggered. For instance a \c NotificationSink can create and show a notification widget, play a sound or launch haptic feedback upon a notification.

\c DuiCompositorNotificationSink communicates to DuiCompositor when a notification is triggered. This sink will create a special notification window and a \c DuiInfoBanner widget. A \b _NET_WM_TYPE_NOTIFICATION window hint is set to the created window. DuiCompositor will identify the notification window by the set window hint. \c DuiCompositorNotificationSink will handle the interaction affecting the notification widget. \c DuiCompositorNotificationSink will also destroy the notification widget and close the notification window when required. %Notification widget can be either cancelled or it can timeout. \c DuiCompositorNotificationSink will communicate the cause that closed the notification window to the DuiCompositor using custom X Atom. DuiCompositor is responsible for showing the notification window on top of any application as well as the transition animation of the notification window. After displaying the info banner the sink places the \c DuiInfoBanner widget onto the \c NotificationArea.

\section event_types Event types

The event type parameter of a notification is used to describe the overall properties of a notification, such as the icon, sound etc. The event type is a string. For each supported event type there is a configuration file in \c /usr/share/dui/notifications/eventtypes that defines the properties for that particular type of event. The base name of the file defines the event type name: the properties for an event of type \c sms are defined in \c /usr/share/dui/notifications/eventtypes/sms\c.conf and so on. Each configuration file consists of lines with key=value pairs. The keys are notification sink API parameter names such as iconId and feedbackId and the values are the values to be assigned to the notification sink API parameter defined by the key. An example configuration file could be as follows:

\verbatim
iconId=Icon-close
feedbackId=press
removable=false
\endverbatim

The \c removable key can be used to define whether a notification of given type is removable when the user taps on the notification banner. If removable equals false the notification will not be removed when the banner is tapped. The associated actions are executed but the application needs to remove the notification. If removable equals true the notification is removed when it is tapped. Notifications are removable by default.

\section links Links

- <a href="https://cwiki.nokia.com/DirectUIFramework">Direct UI wiki</a>

\see

- NotificationSource
- NotificationManagerInterface
- NotificationSink
- DuiCompositorNotificationSink
*/

